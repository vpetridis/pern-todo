{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Developing\\\\WebDev\\\\pern-todo\\\\client\\\\src\\\\components\\\\ListTodo.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Card, Container, Row, Col, CardText, CardBody, CardTitle, CardSubtitle, Button, Spinner } from \"reactstrap\";\nimport EditTodo from \"./EditTodo\";\n\nconst ListTodo = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n\n  const getTodos = () => {\n    fetch(\"http://localhost:5000/todos\").then(res => res.json()).then(result => setTodo({\n      result\n    }, console.log(result)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: todo.map(todo => /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(CardText, {\n          children: [todo.description, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditTodo, {\n          updateDescription: this.updateDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"danger\",\n          onClick: () => this.deleteTodo(todo.todo_id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this)\n    }, todo.todo_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this))\n  }, void 0, false);\n};\n\n_s(ListTodo, \"GeUVAlNxBowLCZ198JwHYbeDH5o=\");\n\n_c = ListTodo;\nexport default ListTodo;\n/* export default class ListTodo extends Component {\r\n  state = { todo: [{ todo_id: null, description: \"\" }], isLoading: false };\r\n\r\n  componentDidMount() {\r\n    //READ THE ANSWER HERE: https://stackoverflow.com/questions/55324088/why-do-i-have-to-refresh-page-manually-after-delete\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"http://localhost:5000/todos\")\r\n      .then((res) => res.json())\r\n      .then((result) =>\r\n        this.setState({ todo: result, isLoading: false }, console.log(result))\r\n      );\r\n  }\r\n  deleteTodo = async (id) => {\r\n    const { todo } = this.state;\r\n    try {\r\n      const deleteTodo = await fetch(`http://localhost:5000/todos/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      this.setState({ todo: todo.filter((todo) => todo.todo_id !== id) });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n  updateDescription = (childData) => {\r\n    this.setState({ todo: childData });\r\n    //create fetch PUT METHOD\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            {\" \"}\r\n            <Spinner color=\"primary\" />\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.todo.map((todo) => (\r\n          <Card key={todo.todo_id}>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Description</CardTitle>{\" \"}\r\n              <CardText>{todo.description} </CardText>\r\n              <EditTodo updateDescription={this.updateDescription} />\r\n              <Button\r\n                color=\"danger\"\r\n                onClick={() => this.deleteTodo(todo.todo_id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </CardBody>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTodo\");","map":{"version":3,"sources":["D:/Developing/WebDev/pern-todo/client/src/components/ListTodo.js"],"names":["React","Component","useState","useEffect","Card","Container","Row","Col","CardText","CardBody","CardTitle","CardSubtitle","Button","Spinner","EditTodo","ListTodo","todo","setTodo","getTodos","fetch","then","res","json","result","console","log","map","description","updateDescription","deleteTodo","todo_id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SACEC,IADF,EAEEC,SAFF,EAGEC,GAHF,EAIEC,GAJF,EAKEC,QALF,EAMEC,QANF,EAOEC,SAPF,EAQEC,YARF,EASEC,MATF,EAUEC,OAVF,QAWO,YAXP;AAYA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAK;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMgB,QAAQ,GAAG,MAAM;AACrBC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,MAAD,IAAYN,OAAO,CAAC;AAAEM,MAAAA;AAAF,KAAD,EAAaC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAb,CAF3B;AAGD,GAJD;;AAMA,sBAAS;AAAA,cAAGP,IAAI,CAACU,GAAL,CAAUV,IAAD,iBACnB,QAAC,IAAD;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,GAAG,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAC8C,GAD9C,eAEE,QAAC,QAAD;AAAA,qBAAWA,IAAI,CAACW,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,QAAD;AAAU,UAAA,iBAAiB,EAAE,KAAKC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,QADR;AAEE,UAAA,OAAO,EAAE,MAAM,KAAKC,UAAL,CAAgBb,IAAI,CAACc,OAArB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAAWd,IAAI,CAACc,OAAhB;AAAA;AAAA;AAAA;AAAA,YADU;AAAH,mBAAT;AAeD,CAxBD;;GAAMf,Q;;KAAAA,Q;AAyBN,eAAeA,QAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport EditTodo from \"./EditTodo\";\r\n\r\nconst ListTodo = ()=> {\r\n  const [todo, setTodo] = useState([]);\r\n\r\n  const getTodos = () => {\r\n    fetch(\"http://localhost:5000/todos\")\r\n      .then((res) => res.json())\r\n      .then((result) => setTodo({ result }, console.log(result)));\r\n  };\r\n\r\n  return  (<>{todo.map((todo) => (\r\n    <Card key={todo.todo_id}>\r\n      <CardBody>\r\n        <CardTitle tag=\"h5\">Description</CardTitle>{\" \"}\r\n        <CardText>{todo.description} </CardText>\r\n        <EditTodo updateDescription={this.updateDescription} />\r\n        <Button\r\n          color=\"danger\"\r\n          onClick={() => this.deleteTodo(todo.todo_id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </CardBody>\r\n    </Card>))}</>);\r\n    \r\n}\r\nexport default ListTodo;\r\n\r\n\r\n/* export default class ListTodo extends Component {\r\n  state = { todo: [{ todo_id: null, description: \"\" }], isLoading: false };\r\n\r\n  componentDidMount() {\r\n    //READ THE ANSWER HERE: https://stackoverflow.com/questions/55324088/why-do-i-have-to-refresh-page-manually-after-delete\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"http://localhost:5000/todos\")\r\n      .then((res) => res.json())\r\n      .then((result) =>\r\n        this.setState({ todo: result, isLoading: false }, console.log(result))\r\n      );\r\n  }\r\n  deleteTodo = async (id) => {\r\n    const { todo } = this.state;\r\n    try {\r\n      const deleteTodo = await fetch(`http://localhost:5000/todos/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      this.setState({ todo: todo.filter((todo) => todo.todo_id !== id) });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n  updateDescription = (childData) => {\r\n    this.setState({ todo: childData });\r\n    //create fetch PUT METHOD\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            {\" \"}\r\n            <Spinner color=\"primary\" />\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.todo.map((todo) => (\r\n          <Card key={todo.todo_id}>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Description</CardTitle>{\" \"}\r\n              <CardText>{todo.description} </CardText>\r\n              <EditTodo updateDescription={this.updateDescription} />\r\n              <Button\r\n                color=\"danger\"\r\n                onClick={() => this.deleteTodo(todo.todo_id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </CardBody>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n */\r\n"]},"metadata":{},"sourceType":"module"}