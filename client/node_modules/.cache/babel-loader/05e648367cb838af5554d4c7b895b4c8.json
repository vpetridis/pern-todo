{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Developing\\\\WebDev\\\\pern-todo\\\\client\\\\src\\\\components\\\\ListTodo.js\";\nimport React, { Component } from \"react\";\nimport { Card, Container, Row, CardText, CardBody, CardTitle, CardSubtitle, Button, Spinner } from \"reactstrap\";\nexport default class ListTodo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todo: [{\n        todo_id: null,\n        description: \"\"\n      }],\n      isLoading: false\n    };\n\n    this.deleteTodo = async id => {\n      const {\n        todo\n      } = this.state;\n\n      try {\n        const deleteTodo = await fetch(`http://localhost:5000/todos/${id}`, {\n          method: \"DELETE\"\n        });\n        this.setState({\n          todo: todo.filter(todo => todo.todo_id !== id)\n        });\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n  }\n\n  componentDidMount() {\n    //READ THE ANSWER HERE: https://stackoverflow.com/questions/55324088/why-do-i-have-to-refresh-page-manually-after-delete\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"http://localhost:5000/todos\").then(res => res.json()).then(result => this.setState({\n      todo: result,\n      isLoading: false\n    }, console.log(result)));\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-center\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(Spinner, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.todo.map(todo => (this.number++, /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            tag: \"h5\",\n            children: [\"Todo ID: \", this.number]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n            tag: \"h6\",\n            className: \"mb-2 text-muted\",\n            children: [\"Todo description:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardText, {\n            children: todo.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"warning\",\n            className: \"mr-4\",\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: () => this.deleteTodo(todo.todo_id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, todo.todo_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Developing/WebDev/pern-todo/client/src/components/ListTodo.js"],"names":["React","Component","Card","Container","Row","CardText","CardBody","CardTitle","CardSubtitle","Button","Spinner","ListTodo","state","todo","todo_id","description","isLoading","deleteTodo","id","fetch","method","setState","filter","err","console","error","message","componentDidMount","then","res","json","result","log","render","map","number"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  Container,\r\n  Row,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Spinner,\r\n} from \"reactstrap\";\r\n\r\nexport default class ListTodo extends Component {\r\n  state = { todo: [{ todo_id: null, description: \"\" }], isLoading: false };\r\n\r\n  componentDidMount() {\r\n    //READ THE ANSWER HERE: https://stackoverflow.com/questions/55324088/why-do-i-have-to-refresh-page-manually-after-delete\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"http://localhost:5000/todos\")\r\n      .then((res) => res.json())\r\n      .then((result) =>\r\n        this.setState({ todo: result, isLoading: false }, console.log(result))\r\n      );\r\n  }\r\n  deleteTodo = async (id) => {\r\n    const { todo } = this.state;\r\n    try {\r\n      const deleteTodo = await fetch(`http://localhost:5000/todos/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      this.setState({ todo: todo.filter((todo) => todo.todo_id !== id) });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n\r\n  number;\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            {\" \"}\r\n            <Spinner color=\"primary\" />\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      \r\n      <div>\r\n        {this.state.todo.map((todo) => ( this.number++,\r\n          <Card key={todo.todo_id}>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Todo ID: {this.number}</CardTitle>\r\n              <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">\r\n                Todo description:{\" \"}\r\n              </CardSubtitle>\r\n              <CardText>{todo.description}</CardText>\r\n              <Button color=\"warning\" className=\"mr-4\">\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                color=\"danger\"\r\n                onClick={() => this.deleteTodo(todo.todo_id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </CardBody>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}