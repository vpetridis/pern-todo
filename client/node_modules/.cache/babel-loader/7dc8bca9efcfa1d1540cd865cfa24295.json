{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Developing\\\\WebDev\\\\pern-todo\\\\client\\\\src\\\\components\\\\ListTodo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { Card, CardText, Container, Row, CardBody, CardTitle, Button, Spinner } from \"reactstrap\";\nimport EditTodo from \"./EditTodo\";\nimport GridLayout from \"react-grid-layout\";\n\nconst ListTodos = () => {\n  _s();\n\n  const layout = [{\n    i: \"b\",\n    x: 1,\n    y: 0,\n    w: 3,\n    h: 2,\n    minW: 2,\n    maxW: 4\n  }];\n  const [todo, setTodos] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  const deleteTodo = async id => {\n    try {\n      const respone = await fetch(`http://localhost:5000/todos/${id}`, {\n        method: \"DELETE\"\n      });\n      setTodos(todo.filter(todo => todo.todo_id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getTodos = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/todos\");\n      const jsonData = await response.json();\n      setTodos(jsonData);\n      setLoading(false);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Spinner, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(GridLayout, {\n      className: \"layout\",\n      layout: layout,\n      cols: 12,\n      rowHeight: 30,\n      width: 1200,\n      children: [todo.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"TEST 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)\n      }, \"b\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)).reverse(), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"TEST 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListTodos, \"eKHWQUnbLvXTn70pxBWLD18DT00=\");\n\n_c = ListTodos;\nexport default ListTodos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTodos\");","map":{"version":3,"sources":["D:/Developing/WebDev/pern-todo/client/src/components/ListTodo.js"],"names":["React","useState","useEffect","Fragment","Card","CardText","Container","Row","CardBody","CardTitle","Button","Spinner","EditTodo","GridLayout","ListTodos","layout","i","x","y","w","h","minW","maxW","todo","setTodos","isLoading","setLoading","deleteTodo","id","respone","fetch","method","filter","todo_id","error","console","getTodos","response","jsonData","json","err","message","map","reverse"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  CardText,\r\n  Container,\r\n  Row,\r\n  CardBody,\r\n  CardTitle,\r\n  Button,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport EditTodo from \"./EditTodo\";\r\nimport GridLayout from \"react-grid-layout\";\r\n\r\nconst ListTodos = () => {\r\n  const layout = [{ i: \"b\", x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 }];\r\n  const [todo, setTodos] = useState([]);\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      const respone = await fetch(`http://localhost:5000/todos/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      setTodos(todo.filter((todo) => todo.todo_id !== id));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  const getTodos = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/todos\");\r\n      const jsonData = await response.json();\r\n      setTodos(jsonData);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n  if (isLoading) {\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-center\">\r\n          {\" \"}\r\n          <Spinner color=\"primary\" />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <GridLayout\r\n        className=\"layout\"\r\n        layout={layout}\r\n        cols={12}\r\n        rowHeight={30}\r\n        width={1200}\r\n      >\r\n        {todo\r\n          .map((todo) => (\r\n            <div key=\"b\">\r\n              {/* <Card key={todo.todo_id}>\r\n                <CardBody>\r\n                  <CardTitle tag=\"h5\">Description</CardTitle>{\" \"}\r\n                  <CardText>{todo.description} </CardText>\r\n                  <EditTodo todos={todo} />\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => deleteTodo(todo.todo_id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </CardBody>\r\n              </Card> */}\r\n              <h1>TEST 1</h1>\r\n            </div>\r\n          ))\r\n          .reverse()}\r\n          <div>TEST 2</div>\r\n      </GridLayout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ListTodos;\r\n"]},"metadata":{},"sourceType":"module"}