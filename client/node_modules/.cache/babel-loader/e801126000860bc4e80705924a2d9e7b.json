{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Developing\\\\WebDev\\\\pern-todo\\\\client\\\\src\\\\components\\\\ListTodo.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport \"../App.css\";\nimport { Card, Col, CardText, Container, Row, CardBody, CardTitle, Spinner, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport { Button } from \"react-bootstrap\";\nimport EditTodo from \"./EditTodo\";\n\nconst ListTodos = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [todo, setTodos] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const [color, setColor] = useState(\"\"); //TODO - CREATE TABLE COLUMN OF COLORS AND SAVE IT WITH POST.\n\n  const ChooseColor = props => {\n    _s();\n\n    const changeColor = e => {\n      const color = e;\n      setColor({\n        color: color\n      }); // console.log({ color });\n    };\n\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const todo_id = props.colorId;\n    console.log(todo_id);\n\n    function updateColor() {\n      try {\n        const color = {\n          color\n        };\n        console.log(color);\n        const response = fetch(`http://localhost:5000/todos/${todo_id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(color)\n        });\n        window.location = \"/\";\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Dropdown, {\n      isOpen: dropdownOpen,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n        style: {\n          position: \"relative\",\n          bottom: \"-5px\"\n        },\n        color: \"primary\",\n        caret: true,\n        children: \"Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        children: [/*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeColor(\"success\"),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeColor(\"warning \"),\n          children: \"Due\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeColor(\"danger\"),\n          children: \"Important\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(ChooseColor, \"z5Nkh6K+y+CV4vT0AOyJ2ID9tJg=\");\n\n  const getTodos = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/todos\");\n      const jsonData = await response.json();\n      setTodos(jsonData);\n      setLoading(false);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const deleteTodo = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/todos/${id}`, {\n        method: \"DELETE\"\n      });\n      setTodos(todo.filter(todo => todo.todo_id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Spinner, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n  const ToasterElement = /*#__PURE__*/React.createElement(\"div\");\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [\" \", todo.map(todo => /*#__PURE__*/_jsxDEV(Col, {\n        xs: {\n          size: \"auto\"\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(Card, {\n          body: true,\n          color: color.color,\n          className: \"m-1\",\n          children: /*#__PURE__*/_jsxDEV(CardBody, {\n            children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n              tag: \"h5\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(CardText, {\n              children: [todo.description, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(EditTodo, {\n                todos: todo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-1\",\n                variant: \"danger\",\n                onClick: () => deleteTodo(todo.todo_id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(ChooseColor, {\n                colorId: todo.todo_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, todo.todo_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)]\n      }, todo.todo_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)).reverse()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ListTodos, \"KBtiHaNQXloH72hAhXJVVv8tuFw=\");\n\n_c = ListTodos;\nexport default ListTodos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTodos\");","map":{"version":3,"sources":["D:/Developing/WebDev/pern-todo/client/src/components/ListTodo.js"],"names":["React","useState","useEffect","Fragment","Card","Col","CardText","Container","Row","CardBody","CardTitle","Spinner","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Button","EditTodo","ListTodos","todo","setTodos","isLoading","setLoading","color","setColor","ChooseColor","props","changeColor","e","dropdownOpen","setDropdownOpen","toggle","prevState","todo_id","colorId","console","log","updateColor","response","fetch","method","headers","body","JSON","stringify","window","location","error","position","bottom","getTodos","jsonData","json","err","message","deleteTodo","id","filter","ToasterElement","createElement","map","size","description","reverse"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"../App.css\";\r\n\r\nimport {\r\n  Card,\r\n  Col,\r\n  CardText,\r\n  Container,\r\n  Row,\r\n  CardBody,\r\n  CardTitle,\r\n  Spinner,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport EditTodo from \"./EditTodo\";\r\n\r\nconst ListTodos = () => {\r\n  const [todo, setTodos] = useState([]);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [color, setColor] = useState(\"\");\r\n\r\n  //TODO - CREATE TABLE COLUMN OF COLORS AND SAVE IT WITH POST.\r\n\r\n  const ChooseColor = (props) => {\r\n    const changeColor = (e) => {\r\n      const color = e;\r\n      setColor({ color: color });\r\n      // console.log({ color });\r\n    };\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n    const todo_id = props.colorId;\r\n    console.log(todo_id);\r\n    function updateColor() {\r\n      try {\r\n        const color = { color };\r\n        console.log(color);\r\n        const response = fetch(`http://localhost:5000/todos/${todo_id}`, {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(color),\r\n        });\r\n\r\n        window.location = \"/\";\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n        <DropdownToggle\r\n          style={{ position: \"relative\", bottom: \"-5px\" }}\r\n          color=\"primary\"\r\n          caret\r\n        >\r\n          Color\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n          <DropdownItem onClick={() => changeColor(\"success\")}>\r\n            Done\r\n          </DropdownItem>\r\n          <DropdownItem onClick={() => changeColor(\"warning \")}>\r\n            Due\r\n          </DropdownItem>\r\n          <DropdownItem onClick={() => changeColor(\"danger\")}>\r\n            Important\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n\r\n  const getTodos = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/todos\");\r\n      const jsonData = await response.json();\r\n      setTodos(jsonData);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/todos/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      setTodos(todo.filter((todo) => todo.todo_id !== id));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-center\">\r\n          {\" \"}\r\n          <Spinner color=\"primary\" />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n  const ToasterElement = React.createElement(\"div\");\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        {\" \"}\r\n        {todo\r\n          .map((todo) => (\r\n            <Col xs={{ size: \"auto\" }} key={todo.todo_id}>\r\n              {\" \"}\r\n              <Card body color={color.color} className=\"m-1\" key={todo.todo_id}>\r\n                <CardBody>\r\n                  <CardTitle tag=\"h5\">Description</CardTitle>{\" \"}\r\n                  <CardText>{todo.description} </CardText>\r\n                  <Row>\r\n                    {\" \"}\r\n                    <EditTodo todos={todo} />{\" \"}\r\n                    <Button\r\n                      className=\"m-1\"\r\n                      variant=\"danger\"\r\n                      onClick={() => deleteTodo(todo.todo_id)}\r\n                    >\r\n                      Delete\r\n                    </Button>{\" \"}\r\n                    <ChooseColor colorId={todo.todo_id} />\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          ))\r\n          .reverse()}\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ListTodos;\r\n"]},"metadata":{},"sourceType":"module"}