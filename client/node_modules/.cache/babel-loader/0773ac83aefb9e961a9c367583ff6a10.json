{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = {\n  //\n  // Basic props\n  //\n  className: _propTypes.default.string,\n  style: _propTypes.default.object,\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes.default.number,\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes.default.bool,\n  // # of cols.\n  cols: _propTypes.default.number,\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes.default.string,\n  // Deprecated\n  verticalCompact: function verticalCompact(props\n  /*: Props*/\n  ) {\n    if (props.verticalCompact === false && process.env.NODE_ENV !== \"production\") {\n      console.warn( // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: _propTypes.default.oneOf([\"vertical\", \"horizontal\"]),\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function layout(props\n  /*: Props*/\n  ) {\n    var layout = props.layout; // I hope you're setting the data-grid property on the grid items\n\n    if (layout === undefined) return;\n\n    require(\"./utils\").validateLayout(layout, \"layout\");\n  },\n  //\n  // Grid Dimensions\n  //\n  // Margin between items [x, y] in px\n  margin: _propTypes.default.arrayOf(_propTypes.default.number),\n  // Padding inside the container [x, y] in px\n  containerPadding: _propTypes.default.arrayOf(_propTypes.default.number),\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes.default.number,\n  //\n  // Flags\n  //\n  isBounded: _propTypes.default.bool,\n  isDraggable: _propTypes.default.bool,\n  isResizable: _propTypes.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool,\n  // parent layout transform scale\n  transformScale: _propTypes.default.number,\n  // If true, an external element can trigger onDrop callback with a specific grid position as a parameter\n  isDroppable: _propTypes.default.bool,\n  // Defines which resize handles should be rendered (default: 'se')\n  // Allows for any combination of:\n  // 's' - South handle (bottom-center)\n  // 'w' - West handle (left-center)\n  // 'e' - East handle (right-center)\n  // 'n' - North handle (top-center)\n  // 'sw' - Southwest handle (bottom-left)\n  // 'nw' - Northwest handle (top-left)\n  // 'se' - Southeast handle (bottom-right)\n  // 'ne' - Northeast handle (top-right)\n  resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf([\"s\", \"w\", \"e\", \"n\", \"sw\", \"nw\", \"se\", \"ne\"])),\n  //\n  // Callbacks\n  //\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes.default.func,\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes.default.func,\n  // Calls when some element is dropped.\n  onDrop: _propTypes.default.func,\n  //\n  // Other validations\n  //\n  droppingItem: _propTypes.default.shape({\n    i: _propTypes.default.string.isRequired,\n    w: _propTypes.default.number.isRequired,\n    h: _propTypes.default.number.isRequired\n  }),\n  // Children must not have duplicate keys.\n  children: function children(props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    var children = props[propName]; // Check children keys for duplicates. Throw if found.\n\n    var keys = {};\n\n    _react.default.Children.forEach(children, function (child) {\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n\n      keys[child.key] = true;\n    });\n  },\n  // Optional ref for getting a reference for the wrapping div.\n  innerRef: _propTypes.default.any\n};\nexports.default = _default;","map":{"version":3,"sources":["D:/Developing/WebDev/pern-todo/client/node_modules/react-grid-layout/build/ReactGridLayoutPropTypes.js"],"names":["Object","defineProperty","exports","value","default","_propTypes","_interopRequireDefault","require","_react","obj","__esModule","_default","className","string","style","object","width","number","autoSize","bool","cols","draggableCancel","draggableHandle","verticalCompact","props","process","env","NODE_ENV","console","warn","compactType","oneOf","layout","undefined","validateLayout","margin","arrayOf","containerPadding","rowHeight","maxRows","isBounded","isDraggable","isResizable","preventCollision","useCSSTransforms","transformScale","isDroppable","resizeHandles","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","onDrop","droppingItem","shape","i","isRequired","w","h","children","propName","keys","Children","forEach","child","key","Error","innerRef","any"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  //\n  // Basic props\n  //\n  className: _propTypes.default.string,\n  style: _propTypes.default.object,\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes.default.number,\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes.default.bool,\n  // # of cols.\n  cols: _propTypes.default.number,\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes.default.string,\n  // Deprecated\n  verticalCompact: function verticalCompact(props\n  /*: Props*/\n  ) {\n    if (props.verticalCompact === false && process.env.NODE_ENV !== \"production\") {\n      console.warn( // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: _propTypes.default.oneOf([\"vertical\", \"horizontal\"]),\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function layout(props\n  /*: Props*/\n  ) {\n    var layout = props.layout; // I hope you're setting the data-grid property on the grid items\n\n    if (layout === undefined) return;\n\n    require(\"./utils\").validateLayout(layout, \"layout\");\n  },\n  //\n  // Grid Dimensions\n  //\n  // Margin between items [x, y] in px\n  margin: _propTypes.default.arrayOf(_propTypes.default.number),\n  // Padding inside the container [x, y] in px\n  containerPadding: _propTypes.default.arrayOf(_propTypes.default.number),\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes.default.number,\n  //\n  // Flags\n  //\n  isBounded: _propTypes.default.bool,\n  isDraggable: _propTypes.default.bool,\n  isResizable: _propTypes.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool,\n  // parent layout transform scale\n  transformScale: _propTypes.default.number,\n  // If true, an external element can trigger onDrop callback with a specific grid position as a parameter\n  isDroppable: _propTypes.default.bool,\n  // Defines which resize handles should be rendered (default: 'se')\n  // Allows for any combination of:\n  // 's' - South handle (bottom-center)\n  // 'w' - West handle (left-center)\n  // 'e' - East handle (right-center)\n  // 'n' - North handle (top-center)\n  // 'sw' - Southwest handle (bottom-left)\n  // 'nw' - Northwest handle (top-left)\n  // 'se' - Southeast handle (bottom-right)\n  // 'ne' - Northeast handle (top-right)\n  resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf([\"s\", \"w\", \"e\", \"n\", \"sw\", \"nw\", \"se\", \"ne\"])),\n  //\n  // Callbacks\n  //\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes.default.func,\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes.default.func,\n  // Calls when some element is dropped.\n  onDrop: _propTypes.default.func,\n  //\n  // Other validations\n  //\n  droppingItem: _propTypes.default.shape({\n    i: _propTypes.default.string.isRequired,\n    w: _propTypes.default.number.isRequired,\n    h: _propTypes.default.number.isRequired\n  }),\n  // Children must not have duplicate keys.\n  children: function children(props\n  /*: Props*/\n  , propName\n  /*: string*/\n  ) {\n    var children = props[propName]; // Check children keys for duplicates. Throw if found.\n\n    var keys = {};\n\n    _react.default.Children.forEach(children, function (child) {\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n\n      keys[child.key] = true;\n    });\n  },\n  // Optional ref for getting a reference for the wrapping div.\n  innerRef: _propTypes.default.any\n};\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}